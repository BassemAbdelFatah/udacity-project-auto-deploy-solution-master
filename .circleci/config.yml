version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
  
  install_ansible:
    description: install ansible.
    steps:
      - run:
          name: install ansible.
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: install awscli.
    steps:
      - run:
          name: install awscli.
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: install nodejs.
    steps:
      - run:
          name: install nodejs.
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && sudo apt-get install -y nodejs
###### end of commands 


jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist

  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
 
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix backend
      - run: npm run test --prefix backend

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: npm i --prefix frontend
      - run: npm run test --prefix frontend

  analyze_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - run: npm audit fix --audit-level=critical --force
      # - run: npm audit --audit-level=critical --prefix backend

  analyze_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - run: npm audit fix --audit-level=critical --force
      # - run: npm audit --audit-level=critical --prefix frontend


  deploy_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend URL and IP (for ansible)
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy_frontend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the frontend infrastructure using cloudformation
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/frontend_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run_db_migrations_for_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run DB migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#############################################################################
  Configure_Server:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["b3:0e:47:83:13:96:58:60:ea:3c:1d:cd:7b:67:aa:ef"]
      - attach_workspace:
          at: ~/
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt playbook.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  deploy_frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_AWS_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Package frontend app
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke_test_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Test backend app.
          command: |
            API_URL=`cat .circleci/outputs/backend_url.txt`
            echo $API_URL
            curl -s $API_URL/api/status
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations


  deploy_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Deploy the backend infrastructure using cloudformation
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
              --no-paginate --output text)

            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            printf '%s\n' "${STACKS[@]}"

            aws cloudformation deploy \
              --template-file .circleci/cloudformation/cloudfront_infrastructure.yml \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name udapeople-prod-cloudfront

            if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
              echo "Removing previous stack"
              aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi

      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

workflows:
  my_workflow:
    jobs:
      - build_backend
      - build_frontend
      - test_backend:
          requires:
            - build_backend
      - test_frontend:
          requires:
            - build_frontend
      - analyze_backend:
          requires:
            - test_backend
      - analyze_frontend:
          requires:
            - test_frontend
      - deploy_backend_infrastructure:
          requires:
            - analyze_backend
            - analyze_frontend
          filters:
            branches:
              only: [ main ]
      - deploy_frontend_infrastructure:
          requires:
            - analyze_backend
            - analyze_frontend
          filters:
            branches:
              only: [ main ]
      - run_db_migrations_for_backend:
          requires:
            - deploy_backend_infrastructure
      - Configure_Server:
          requires:
            - run_db_migrations_for_backend
      - deploy_frontend:
          requires:
            - run_db_migrations_for_backend
      # - package_frontend_artifact:
      #     requires:
      #       - deploy_frontend_infrastructure
      #       - run_db_migrations_for_backend
      # - deploy_frontend_artifact:
      #     requires:
      #       - package_frontend_artifact
      # - smoke_test_backend:
      #     requires:
      #       - deploy_backend_artifact
      # - smoke_test_frontend:
      #     requires:
      #       - deploy_frontend_artifact
      # - deploy_cloudfront_infrastructure:
      #     requires:
      #       - smoke_test_backend
      #       - smoke_test_frontend
